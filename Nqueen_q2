import java.util.*;
public class NQueens{
     public List<List<String>>solveNQueens(int n){
            List< List<String>> result = new ArrayList <> ();
            char [] [] board = new char [n] [n] ;
//intialize board with '.'
            for ( int i = 0; i < n; i++) {
                Arrays. fill ( board[i] , '.');
            }
            backtrack( result, board, 0, n);
            return result;
  }
  private void backtrack(List<List<String>> result, char[][] board, int row , int n) {
       // if all queens are placed 
          if (row == n){
            result.add(construct(board));
                   return;
          }
          for (int col=0; col < n; col++) {
              if (isSafe(board, row, col, n)){
                 board[row] [col]=backtrack(result,board,row+1,n);
                 board[row][col]='.';
                // Backtrack
           }
      }
}
  private boolean isSafe(char[][] board,int row, int col, int n) {
// checks column 
          for (int i =0; i< row; i++){
               if (board [i][col] == 'Q')
               return false;
      }
// chacks upper-left diagonal
         for (int i = row-1 , j = col-1; i>==0 && j>= 0 ; i--, j--){
              if (board[i][j] == 'Q')
               return false;
      }
// chacks upper-right diagonal
          for (int i = row -1, j = col +1; i>=0 && j<n; i--,j++){
               if ( board[i][j] == 'Q')
    return false;
      }
          return true;
}
     private static void main(String[] args) {
            NQueens nq=new NQueens();
            int n=4;
            List<List<String>> solutions = nq.solveNQueens(n)) ;
            // print all solutions 
            for (List<String> sol: solutions) {
                 for (String row : sol) {
                       System.out.println(row);
                  }
                 System.out.println();
         }
     }
}

      
          
